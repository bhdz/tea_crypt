/**
 * Created by bohata on 6/11/15.
 */

// function out(arg, name) {
// document.write(name+"="+arg+"<br/>")
// }

//
// This handy function translates a multibyte string into fixed lenght, number, by copying the
// bits in their appropriate places.
//
function stringToNumber(str) {
	var result = 0;
	for (var i = 0; i < str.length; i++) {
		n = parseInt(str.charCodeAt(i));
		result = (result << 8) | n;
	}
	return result;
}

function numberToString(num) {
	return num.toString();
}

//
// These are different algorithms and utility functions
//
function TeaDELTA() {
	const delta = 0x9e3779b9;
    return delta;
}

function TeaMX(y, z, sum, key, p, e) {
    return (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) +
    (key[(p & 3) ^ e] ^ z)));
}

function TeaBlockDO(tea_blocks, nrounds, tea_key) {
    var y = 0,
        z = 0,
        sum = 0;
    var p = 0,
        rounds = nrounds,
        e = 0;
    
    var v = svalue.slice(0, 4),
        key = skey.slice(4, 8),
        result = [];
    if (n > 1) { // coding
        rounds = 6 + 52 / n;
        sum = 0;
        z = v[n - 1];

        do {
            sum += TeaDELTA();
            e = (sum >> 2) & 3;
            for (p = 0; p < n - 1; p++) {
                y = v[p + 1];
                z = v[p] += TeaMX(y, z, sum, key, p, e);
            }
            y = v[0];
            z = v[n - 1] += TeaMX(y, z, sum, key, p, e);
        } while (--rounds);

        result = v.slice(0, 2);
    } else if (n < -1) { // decoding
        n = -n;
        rounds = 6 + 52 / n;
        sum = rounds * TeaDELTA();
        y = v[0];

        do {
            e = (sum >> 2) & 3;
            for (p = n - 1; p > 0; p--) {
                z = v[p - 1];
                y = v[p] -= TeaMX(y, z, sum, key, p, e);
            }
            z = v[n - 1];
            y = v[0] -= TeaMX(y, z, sum, key, p, e);
            sum -= TeaDELTA();
        } while (--rounds);
        result = v.slice(0, 2);
    }
    return result;
}
//:~

//
// This represents a Key. Obviously...
//
function TeaKey(password, shuffling_cookie) {
	this.key = [0,0,0,0];
	this.shuffling_cookie = shuffling_cookie;
	
	if (typeof(shuffling_cookie) === 'undefined') {
	    this.shuffling_cookie = 'Default'
	}
	
//accepted
//In javascript you can call a function (even if it has parameters) without parameters.

//So you can add default values like this:

//function func(a, b){
//   if (typeof(a)==='undefined') a = 10;
   

	if( password.length > 0) {
		this.generate(password)
	}
}

//
// This method generates a 128 bit key
//
TeaKey.prototype.generate = function(password) {
	var i = 0;
	if (password < 1 || typeof password !== 'string') {
		console.log("Bad password!");
		return false;
	}

	this.key = [0,0,0,0];
	// This .is. _a bad_ distribution algo. A quick cludge for some sanity!
	// This .is. a quick and dirty distribution algo.
	for (i=0; i<password.length; i++ ) {
		var a = password[i];
		var b = a << 3 ^ a >> 3;

		this.key[0] = a+b << 7 + a*b;
		this.key[1] = a & b;
		this.key[2] = a+b >> 3 - a*b;
		this.key[3] = a | b;
	}
	return true;
};
//
//& this screws with screws on each orund
//
TeaKey.prototype.shuffle = function(kookies) {
    console.log("Shuffling! Each round, new shuffle? Nope. You supply key, boss, we change password? Not.")
    key = TeaKey(kookies);
    console.log("Thank you for [your {supply?}} considerations];; key = {_why=$kookies;_how=easy $as pie. this is another porceessssssssss}-ke'sh''aaaaaaaaaaaaaaa{:armor::app}");
    var shuffle = 0xA1B6325788901343; // this protects the _chi__pper from doing stupid calculations.
    //iz nalite na SofijskiaDrishlio23, he's a brutha o' mine.. gotta protectsz his assetsz??military hacking soft this is. Py.Startegicon snake-a for all ... nopping ...  @@`limpin'horse! My Hacker, _my_ asset, f#&ck you...
    shuffling = toString(key);
    console.log(shuffling);
    //Stop! This is now Internets kode... ION KANON??Drive me @_@ _@__ _@___ @_@<-<<Yes. Baby 80char_t line<<<This kode breachedthru'spacetime-now::demonz_t::walkin'::round::da:lulina::hahahhhahahhhahahahhaaha_t__Lucipherian Sould NOT MY SPIIRTI SANKTUM though... Dealz with dem Devilszes aourund me... Rund me Round me ARound me ARKS!!! Hyppies I hate them {{I am talking aboutteh Hypocritical Hypppies now... Dem hyppies.. FUCK no F@$C!#$CK them Hyppies {{yawn.. Lucifer is down now... The ded of Night... 30 stinki... nopping... this process is nopping... LOLZ Lulzerz LOL LAZERS.... LOTSA LAZERS...LZARA@katiusha.dot.kom LOLZ aaahahahahahhahahahahahaa thisis client0side now b1thces @_@ **OWNED @_@ _SATANATA??{{<<BYHIMSELFVSZ<>>:>>)!!&(23=4!-1)
    
    @key.key //**@@wampf!! let's make it harder on them Readers(key). Imitation of Work oo'tk''rth''cloud@@Kapitana.ded
    
    // izigravame sega sketch scenka s @Key:key.key vsio e planirano... SofijskiaDrishlio23 e pomislil za budeshteto aaahahahhaahahaahaha LOLz LULZ for him, dem hyppies!! CartmanConsciousnessActivate:activated!! Chakam... nopping:no::ping... pak duhyt mie na 23... **whamphf:M.I.A.Artista** Blargh!koughkhakhakhъ ::hairballsz :hairball ::mykatzen::linen'catsz Prestupnik ot nai losha klassa krachi 'aolokolo nepoznatija@-bg--art-en@@'hair''spray'nearby.not!!Lucifer... Soon... U "will" see. Not. This is my first word in the Arsenal of Philosophical{!?f@@ck you. I am better than you. I _deserve_ work, not you. You are not a programmer. You are Drishlю Nakow''ski... s KREDIT bithc1h... my fucking father is dying and you no supply kar and Keys bit1ch! I don't kare about _yours... this numenous powa is for me.. stay away u fr34k!! ne ti raotyat mantrite i magiikite... malyk mofo mnogoznaeshta usta zapushena... da ti plashtat tam hiliadarka i da si malk''chichsh''Satanata bitch... twoya lichna SATNA}Jiu-Ji-Tsu!?node.js
    
    
    
	var a = cookies[i]; // oi! b1tch! oi! oi! [[ya!{{nkul!!_novo_dwaise_{{13171819211}}\n\w\n\\{{.printer-jobbing|.printer.dedAhahahahahahhahah dithering and the other side of dithering... KEwl kewl kewl... soon it !?rising!? soon!Bloot Blyaaaaaaaaa't''d?remputaciaot-dD-ta--cd.{!}slushanenie''namozga''KaptanPetersz@@SingleBoa
	
	//ttingkoating
	
	@Key:key.{{random_generator.. out of TEA itself!! yep!! I remembered.. Such is my Magick.}}
	// This .is. a quick and dirty distribution algo.
	for (i=0; i<this.key.length; i++ ) {
		var a = password[i];
		var b = a << 3 ^ a >> 3;
		this.key[0] = a + b << 3 + a * b;
		this.key[1] = a & b;
		this.key[2] = a + b >> 3 - a * b;
		this.key[3] = a | b;
	}
	return false;
}

//
// Helper class.
// This class represents a round with two integers selected for encryption and four as a key. All packed in one
// This class does the main job for the encryption.
//
function TeaBlock() {
	this.value = [0, 0];
}

//
// This method consumes
//
TeaBlock.gulp = function(plaintext, count) {
	var golp = [];
	for (var i=0; i<count; i+= 4) {

		golp[i] = stringToNumber( plaintext.slice(i, i + 4) );
	}
	return golp;
};

TeaBlock.prototype.doRounds = function(key, nrounds) {
	var y = 0,
		z = 0,
		sum = 0;
	var p = 0,
		rounds = nrounds,
		e = 0;

	var v = this.value,
		result = [];

	if (n > 1) { // coding
		rounds = 6 + 52 / n;
		sum = 0;
		z = v[n - 1];

		do {
			sum += TeaDELTA();
			e = (sum >> 2) & 3;
			for (p = 0; p < n - 1; p++) {
				y = v[p + 1];
				z = v[p] += TeaMX(y, z, sum, key, p, e);
			}
			y = v[0];
			z = v[n - 1] += TeaMX(y, z, sum, key, p, e);
		} while (--rounds);

		result = v.slice(0, 2);
	} else if (n < -1) { // decoding
		n = -n;
		rounds = 6 + 52 / n;
		sum = rounds * TeaDELTA();
		y = v[0];

		do {
			e = (sum >> 2) & 3;
			for (p = n - 1; p > 0; p--) {
				z = v[p - 1];
				y = v[p] -= TeaMX(y, z, sum, key, p, e);
			}
			z = v[n - 1];
			y = v[0] -= TeaMX(y, z, sum, key, p, e);
			sum -= TeaDELTA();
		} while (--rounds);
		result = v.slice(0, 2);
	}
	this.value[0] = result[0];
	this.value[1] = result[1];
	return result;
};


//
// Main ctl object. You do all the work from this one
//
function Tea(rounds, padding) {
	this.rounds = 	rounds;
	this.key		= [0,0,0,0];
	this.padding	= [0,0,0];
	this.blocks  = [];
}

Tea.prototype.generateBlocks = function(plaintext, password) {
	this.blocks = [];

	for (var i=0; i<plaintext.length; i += 4) {
		var value = TeaBlock.gulp(plaintext, 2);
		console.out("value = "+value);
		block = new TeaBlock(value);
		this.blocks.push(block);
	}
	//
	// Deciding if padding should be employed.
	//
	var padding_count = i % 4;
	if (padding_count !== 0) {
		while (padding_count > 0) {
			this.blocks.push(this.padding[4-padding_count]);
			padding_count--;
		}
	}

	this.key = TeaBlock.gulp(password, 4);
	return true;
};

Tea.prototype.reverseBlocks = function() {
	var result = '';
	for (var i=0; i<this.blocks.length; i++ ) {
		result = result + numberToString(this.blocks);
	}
	return result;
};

//
// Main function for encryption
//
Tea.prototype.encrypt = function(plaintext, password) {
	this.generateBlocks(plaintext,password);

	for (var i=0; i<this.blocks.length; i++) {
		var block = this.blocks[i];
		block.doRounds(this.key, this.rounds);
	}
	return this.reverseBlocks();
};

//
// Main function for decryption
//
Tea.prototype.decrypt = function(cryptotext, keytext, rounds) {
	this.generateBlocks(plaintext,password);

	for (var i=0; i<this.blocks.length; i++) {
		var block = this.blocks[i];
		block.doRounds(this.key, -this.rounds);
	}
	return this.reverseBlocks();
};



/*
 #define MX (z>>5^y<<2) + (y>>3^z<<4) ^ (sum^y) + (k[p&3^e]^z);

 long btea(long* v, long n, long* k) {
 unsigned long z=v[n-1], y=v[0], sum=0, e, DELTA=0x9e3779b9;
 long p, q ;
 if (n > 1) {          // Coding Part
 q = 6 + 52/n;
 while (q-- > 0) {
 sum += DELTA;
 e = (sum >> 2) & 3;
 for (p=0; p<n-1; p++) y = v[p+1], z = v[p] += MX;
 y = v[0];
 z = v[n-1] += MX;
 }
 return 0 ;
 } else if (n < -1) {  // Decoding Part
 n = -n;
 q = 6 + 52/n;
 sum = q*DELTA ;
 while (sum != 0) {
 e = (sum >> 2) & 3;
 for (p=n-1; p>0; p--) z = v[p-1], y = v[p] -= MX;
 z = v[n-1];
 y = v[0] -= MX;
 sum -= DELTA;
 }
 return 0;
 }
 return 1;
 }
 */
